// RUN: rm -f %t.ll ; \
// RUN: %thorin %s --output-ll %t.ll --output-thorin - 
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 0
// RUN: %t 1 2 3 ; test $? -eq 6

.import core;
.import mem;

.con .extern main (mem: %mem.M, argc: .Idx 4294967296, argv: %mem.Ptr (%mem.Ptr (.Idx 256, 0:.Nat), 0:.Nat), return: .Cn [%mem.M, .Idx 4294967296]) = {
    .con loop (mem: %mem.M, i: .Idx 4294967296, acc: .Idx 4294967296, cn: .Cn [%mem.M, .Idx 4294967296]) = {
        .let cond: (.Idx 2) = %core.icmp.ul 4294967296 (i, argc);

        .con exit (mem: %mem.M, cn: .Cn [%mem.M, .Idx 4294967296]) =
            cn (mem, acc);

        .con body (mem: %mem.M, cn: .Cn [%mem.M, .Idx 4294967296]) = {
            .let inc: (.Idx 4294967296) = %core.wrap.add 4294967296 0 (1:(.Idx 4294967296), i);
            .let acci: (.Idx 4294967296) = %core.wrap.add 4294967296 0 (i, acc);
            loop (mem, inc, acci, cn)
        };
        (exit, body)#cond (mem, cn)
    };

    .con second_loop (mem: %mem.M, ret: .Idx 4294967296) =
        loop (mem, 0:(.Idx 4294967296), ret, return);

    // using `return` instead of `second_loop` here "resolves" the issue
    loop (mem, 0:(.Idx 4294967296), 0:(.Idx 4294967296), second_loop)
};


// CHECK-DAG: main: .Cn [%mem.M, (%Int 4294967296), %mem.Ptr (%mem.Ptr ((%Int 256), 0:.Nat), 0:.Nat), .Cn [%mem.M, (%Int 4294967296)]], @(_[[memId:[0-9]+]], _[[argcId:[0-9]+]], _{{[0-9]+}}, _[[returnId:[0-9]+]]) = {
// CHECK-DAG: _[[appLoopId:[0-9]+]]: ⊥:★ = loop_[[loopId:[0-9]+]] ‹2:.Nat; 0:(%Int 4294967296)›;
// CHECK-DAG: _[[appLoopId]]

// CHECK-DAG: _[[exitEtaId:[0-9]+]]: .Cn [%mem.M, (%Int 4294967296)], @(_{{[0-9]+}}, _{{[0-9]+}}) = {
// CHECK-DAG:    _[[appReturnId:[0-9]+]]: ⊥:★ = _[[returnId]] @_[[exitEtaId]];
// CHECK-DAG:    _[[appReturnId:[0-9]+]]

// CHECK-DAG: loop_[[loopId]]: .Cn «2:.Nat; (%Int 4294967296)», @(_[[iterId:[0-9]+]], _[[accId:[0-9]+]]) = {
// CHECK-DAG: _[[condId:[0-9]+]]: (%Int 2) = %core.icmp.XygLe 4294967296:.Nat (_[[iterId]], _[[argcId]]);
// CHECK-DAG: _[[appCondId:[0-9]+]]: ⊥:★ = (exit_[[exitId:[0-9]+]], body_[[bodyId:[0-9]+]])#_[[condId]] ();
// CHECK-DAG: _[[appCondId]]

// CHECK-DAG: exit_[[exitId]]: .Cn [] = {
// CHECK-DAG: _[[appExitEtaId:[0-9]+]]: ⊥:★ = _[[exitEtaId]] (_[[memId]], _[[accId]]);
// CHECK-DAG: _[[appExitEtaId]]

// CHECK-DAG: body_[[bodyId]]: .Cn [] = {
// CHECK-DAG: _[[addIterId:[0-9]+]]: (%Int 4294967296) = %Wrap_add (0:.Nat, 4294967296:.Nat) (1:(%Int 4294967296), _[[iterId]]);
// CHECK-DAG: _[[addAccId:[0-9]+]]: (%Int 4294967296) = %Wrap_add (0:.Nat, 4294967296:.Nat) (_[[accId]], _[[iterId]]);
// CHECK-DAG: _[[appLoopIdBody:[0-9]+]]: ⊥:★ = loop_[[loopId]] (_[[addIterId]], _[[addAccId]]);
// CHECK-DAG: _[[appLoopIdBody]]

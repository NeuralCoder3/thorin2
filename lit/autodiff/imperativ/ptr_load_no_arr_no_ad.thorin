// RUN: rm -f %t.ll ; \
// RUN: %thorin -d autodiff %s --output-ll %t.ll --output-thorin -

.import core;
.import autodiff;
.import mem;

.let I32 = .Idx 4294967296;
.con printIntegerNL [%mem.M, I32, .Cn [%mem.M]];

.con f [[mem : %mem.M, a: %mem.Ptr (I32, 0)], ret: .Cn [mem : %mem.M, I32]] = {
    .let (load_mem, load_val) = %mem.load (I32, 0) (mem, a);
    .let scaled = %core.wrap.mul 4294967296 0 (2:I32, load_val);
    ret (load_mem, scaled)
    // 2*a[1]
};

.con .extern main [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (.Idx 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, I32]] = {

    .con ret_cont [[mem : %mem.M, a: I32]] = {
            printIntegerNL(mem, a, .cn [mem:%mem.M] = {
                    return (mem, 0:I32)
            })
    };

    .let (alloc_mem, alloc_ptr) = %mem.alloc (I32, 0) mem;
    .let store = %mem.store (I32, 0) (alloc_mem, alloc_ptr, argc);
    f ((store, alloc_ptr),ret_cont)
};


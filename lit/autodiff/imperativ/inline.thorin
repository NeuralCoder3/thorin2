// RUN: rm -f %t.ll ; \
// RUN: %thorin -d direct -d clos -d autodiff %s --output-ll %t.ll --output-thorin - 
// RUN: clang %S/lib.c %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 100
// RUN: %t 1 ; test $? -eq 100
// RUN: %t 1 2 ; test $? -eq 100


.import core;
.import autodiff;
.import mem;

.let I32 = .Idx 4294967296;

.con f [[mem : %mem.M, x: I32], ret: .Cn [mem : %mem.M, I32]] = {
    .let (alloc_mem, a) = %mem.alloc («100:.Nat; I32», 0) mem;
    .let lea1 = %mem.lea (100:.Nat, <100:.Nat; I32>, 0) (a, 3:(.Idx 100));
    .let store_mem = %mem.store (I32, 0) (alloc_mem, lea1, x);

    .let lea = %mem.lea (100:.Nat, <100:.Nat; I32>, 0) (a, 3:(.Idx 100));
    .let (load_mem, load_val) = %mem.load (I32, 0) (store_mem, lea);
    .let scaled = %core.wrap.mul 4294967296 0 (100:I32, load_val);
    ret (load_mem, scaled)
};

.con .extern main [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (.Idx 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, I32]] = {

    .con ret_cont [[mem : %mem.M, a: I32], pb:.Cn[[%mem.M, I32],.Cn[[%mem.M, I32]]]] = {
        .con pb_ret_cont [mem : %mem.M, x: I32] = {
            // .let lea = %mem.lea (100:.Nat, <100:.Nat; I32>, 0) (a, 1:(.Idx 100));
            // .let (load_mem, load_val) = %mem.load (I32, 0) (mem, lea);
            // return (load_mem, load_val)
            return (mem, x)
            // return (mem, (a,x))
        };
        pb((mem, 1:I32), pb_ret_cont)
    };


    .let f_diff = %autodiff.ad (.Cn [[%mem.M, I32],.Cn[%mem.M, I32]]) f;

    f_diff ((mem, argc),ret_cont)
};


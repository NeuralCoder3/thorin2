// RUN: rm -f %t.ll ; \
// RUN: %thorin -d autodiff -d direct -d clos -d math %s --output-ll %t.ll --output-thorin - 
// RUN: clang %S/lib.c %t.ll -o %t -Wno-override-module
// RUN: %t 2 3 | FileCheck %s

.import core;
.import autodiff;
.import mem;


.let I32 = .Idx 4294967296;
.con printIntegerNL [%mem.M, I32, .Cn [%mem.M]];

.con f [[mem : %mem.M, x: I32], ret: .Cn [mem : %mem.M, I32]] = {
    .let (mem_alloc,p) = %mem.alloc («100:.Nat; I32», 0) mem;
    .let a = %mem.lea (100:.Nat, <100:.Nat; I32>, 0) (p, 1:(.Idx 100));
    .let v = %core.wrap.mul 4294967296 0 (x, x);
    .let mem_store = %mem.store (I32, 0) (mem_alloc, a, v);
    .let (mem_load, val) = %mem.load (I32, 0) (mem_store, a);
    .let scaled = %core.wrap.mul 4294967296 0 (3:I32, val);
    ret (mem_load, scaled)
    // a[1] = x * x
    // return a[1] * 3
};

.con .extern main [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (.Idx 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, I32]] = {

    .con ret_cont [[mem : %mem.M, a: I32], pb:.Cn[[%mem.M, I32],.Cn[[%mem.M, I32]]]] = {
        .con pb_ret_cont [mem : %mem.M, pb: I32] = {
            printIntegerNL(mem, a, .cn [mem1:%mem.M] = {
                printIntegerNL(mem1, pb, .cn [mem2:%mem.M] = {return (mem2, 0:I32)})
            })
        };
        // pb((mem, a), pb_ret_cont)
        pb((mem, (1:I32)), pb_ret_cont)
    };

    .let f_diff = %autodiff.ad (.Cn [[%mem.M, I32],.Cn[%mem.M, I32]]) f;
    f_diff ((mem, argc),ret_cont)
};

// CHECK: 27
// CHECK: 18


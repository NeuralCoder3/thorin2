// RUN: rm -f %t.ll ; \
// RUN: %thorin -d autodiff %s --output-ll %t.ll --output-thorin -

.import core;
.import autodiff;
.import mem;

.let i32 = .Idx 4294967296;

.con f [[mem : %mem.M, x: i32], ret: .Cn [mem : %mem.M, i32]] = {
    .let (mem_alloc,p) = %mem.alloc («100:.Nat; i32», 0) mem;
    .let a = %mem.lea (100:.Nat, <100:.Nat; i32>, 0) (p, 1:(.Idx 100));
    .let mem_store = %mem.store (i32, 0) (mem_alloc, a, x);
    .let (mem_load, val) = %mem.load (i32, 0) (mem_store, a);
    .let scaled = %core.wrap.mul 4294967296 0 (100:i32, val);
    ret (mem_load, scaled)
};

.con .extern main [mem : %mem.M, argc : i32, argv : %mem.Ptr (%mem.Ptr (.Idx 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, i32]] = {

    .con ret_cont [[mem : %mem.M, a: i32], pb:.Cn[[%mem.M, i32],.Cn[[%mem.M, i32]]]] = {
        .con pb_ret_cont [mem : %mem.M, pb: i32] = {
            return (mem, pb)
        };
        // pb((mem, a), pb_ret_cont)
        pb((mem, (1:i32)), pb_ret_cont)
    };

    .let f_diff = %autodiff.ad (.Cn [[%mem.M, i32],.Cn[%mem.M, i32]]) f;
    f_diff ((mem, argc),ret_cont)
};

